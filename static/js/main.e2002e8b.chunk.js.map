{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","image","rizky","setState","img","nama","_this2","react_default","a","createElement","id","className","items","map","index","style","onClick","clicked","bind","key","src","width","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCgFzBC,2BA3Eb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAQ,QACRC,MAAQ,aALMT,uEAQVU,GAENP,KAAKQ,SAAS,CACZH,MAAQE,EAAMF,MACdC,MAAQC,EAAME,IACdC,KAAOH,EAAMG,wCAuBR,IAAAC,EAAAX,KACP,OACEY,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAR,IAGEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAAOhB,KAAKJ,MAAMqB,MAAMC,IAAI,SAACX,EAAMY,GAC9C,IAAIC,EAAQ,QAQZ,OAJGT,EAAKP,MAAMC,QAAUE,EAAMF,QAC5Be,EAAQ,sBAGHR,EAAAC,EAAAC,cAAA,KACLE,UAAaI,EAAM,IAAKb,EAAMF,MAE9BgB,QAAWV,EAAKW,QAAQC,KAAKZ,EAAKJ,GAClCiB,IAAOL,GAENZ,EAAMG,SAMbE,EAAAC,EAAAC,cAAA,OAAKE,UAAa,QAAlB,cACaJ,EAAAC,EAAAC,cAAA,QAAME,UAAa,YAAahB,KAAKI,MAAMC,OAAQL,KAAKI,MAAMC,OACzEO,EAAAC,EAAAC,cAAA,mCAA2Bd,KAAKI,MAAMM,MACtCE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKW,IAAKzB,KAAKI,MAAME,MAAOoB,MAAQ,iBApE5BC,cCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvC,QACfiC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KClEjEC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,CAAKtC,MAxBP,CACZ,CACEP,KAAK,aACLL,MAAO,QACPI,IAAK,iBAEP,CACEC,KAAK,YACLL,MAAQ,OACRI,IAAK,gBAEP,CACEC,KAAK,cACLL,MAAQ,QACRI,IAAK,iBAEP,CACEC,KAAK,sBACLL,MAAQ,SACRI,IAAK,qBAMP+C,SAASC,eAAe,SDTnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMJ,GAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFA0B,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MChB/BE","file":"static/js/main.e2002e8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      color : \"Merah\",\r\n      image : \"Apelmerah\",\r\n    };\r\n  }\r\n  clicked(rizky){\r\n    //untuk memperbarui state sesuai dengan rizky yang dipilih\r\n    this.setState({\r\n      color : rizky.color,\r\n      image : rizky.img,\r\n      nama : rizky.nama,\r\n    });\r\n  }\r\n  // rizkygambar(){\r\n  //   var gambar = \"Home\";\r\n  //   if(this.state.active === \"Home\"){\r\n  //     gambar = \"Home\";\r\n  //   }\r\n  //   else if(this.state.active.toLowerCase() === \"merah\"){\r\n  //     gambar = \"Apelmerah\";\r\n  //   }\r\n  //   else if(this.state.active.toLowerCase() === \"kuning\"){\r\n  //     gambar = \"Apelkuning\";\r\n  //   }\r\n  //   else if(this.state.active.toLowerCase() === \"hijau\"){\r\n  //     gambar = \"Apelhijau\";\r\n  //   }\r\n  //   else if(this.state.active.toLowerCase() === \"biru\"){\r\n  //     gambar = \"Apelbiru\";\r\n  //   }\r\n  //   return <img src ={gambar+\".jpg\"} width = \"200\"/>\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"app\">q\r\n        { /* map akan loop sebanyak rizky yang didefinisikan*/ }\r\n        {/* kemudian mengembalikan elemen <a/> */}\r\n        <nav className=\"nav\">{this.props.items.map((rizky,index) => {\r\n            var style = 'rizky';\r\n            // console.log(rizky.img );\r\n//          rizky titik color maksudnya adalah karena rizky = item di index JS tidak lagi sebuah string, namun adalah Array Object\r\n//          Maka menggunakan titik, agar dapat menentukkan object array mana yang akan di panggil\r\n            if(this.state.color === rizky.color){\r\n              style = '${style} is-active';\r\n            }\r\n\r\n            return <a\r\n              className = {style+\" \"+ rizky.color}\r\n              //bind untuk membuat // menjadikan (menjadikan \"(this,rizky)\" sebagai parameter)// 'rizky' bisa dikirim ke fungsi 'clicked'\r\n              onClick = {this.clicked.bind(this,rizky)}\r\n              key = {index}\r\n            >\r\n              {rizky.nama}\r\n            </a>;\r\n          }\r\n        )}\r\n        </nav>\r\n\r\n        <div className =  \"info\">\r\n          ini adalah <span className = {\"selected \"+ this.state.color}>{this.state.color}</span>\r\n          <p>Ini adalah gambar dari {this.state.nama}</p>\r\n          <br/>\r\n          <br/>\r\n          <img src={this.state.image} width = \"200\"/>\r\n          {/*this.rizkygambar()*/}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Custom.css'; //import cssnya\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst items = [\r\n  {\r\n    nama:\"Apel Biasa\",\r\n    color :'Merah',\r\n    img :'Apelmerah.jpg',\r\n  },\r\n  {\r\n    nama:\"Apel Aple\",\r\n    color : 'Biru',\r\n    img :'Apelbiru.jpg',\r\n  },\r\n  {\r\n    nama:\"Apel Malang\",\r\n    color : 'Hijau',\r\n    img :'Apelhijau.jpg',\r\n  },\r\n  {\r\n    nama:\"Apel Setengah Masak\",\r\n    color : 'Kuning',\r\n    img :'Apelkuning.jpg',\r\n  }\r\n];\r\n\r\n\r\nReactDOM.render(<App items={items}/>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}